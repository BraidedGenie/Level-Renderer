// "Kitchen_1Drawers.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Kitchen_1Drawers.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Kitchen_1Drawers_version_
const char Kitchen_1Drawers_version[4] = { '0','1','9','d' };
#define _Kitchen_1Drawers_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Kitchen_1Drawers_vertexcount_
const unsigned Kitchen_1Drawers_vertexcount = 128;
#define _Kitchen_1Drawers_vertexcount_
#endif
#ifndef _Kitchen_1Drawers_indexcount_
const unsigned Kitchen_1Drawers_indexcount = 252;
#define _Kitchen_1Drawers_indexcount_
#endif
#ifndef _Kitchen_1Drawers_materialcount_
const unsigned Kitchen_1Drawers_materialcount = 3; // can be used for batched draws
#define _Kitchen_1Drawers_materialcount_
#endif
#ifndef _Kitchen_1Drawers_meshcount_
const unsigned Kitchen_1Drawers_meshcount = 3;
#define _Kitchen_1Drawers_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Kitchen_1Drawers_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Kitchen_1Drawers_vertices[128] =
{
	{	{ -0.480136f, 0.035385f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.480136f, 0.035385f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.505406f, 0.006807f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.505406f, 0.006807f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.505406f, 1.571075f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.505406f, 1.571075f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.505406f, 0.006807f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.505406f, 0.006807f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.505406f, 1.571075f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.571075f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.505406f, 0.006807f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.505406f, 0.006807f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.571075f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.571075f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.505406f, 0.006807f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.505406f, 0.006807f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.447859f, 1.508848f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.536000f, 0.000000f, -0.844200f }	},
	{	{ -0.447859f, 0.071887f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.536000f, 0.000000f, -0.844200f }	},
	{	{ -0.480136f, 0.035385f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.536000f, 0.000000f, -0.844200f }	},
	{	{ -0.480136f, 1.545351f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.536000f, 0.000000f, -0.844200f }	},
	{	{ 0.480136f, 1.545351f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.505406f, 1.571075f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.480136f, 1.545351f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.505406f, 1.571075f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.447859f, 1.508848f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.447859f, 1.508848f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.447859f, 0.071887f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.447859f, 0.071887f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.447859f, 1.508848f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.489500f, -0.872000f }	},
	{	{ -0.447859f, 1.508848f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.489500f, -0.872000f }	},
	{	{ -0.480136f, 1.545351f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.489500f, -0.872000f }	},
	{	{ 0.480136f, 1.545351f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.489500f, -0.872000f }	},
	{	{ 0.447859f, 0.071887f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.536000f, 0.000000f, -0.844200f }	},
	{	{ 0.447859f, 1.508848f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.536000f, 0.000000f, -0.844200f }	},
	{	{ 0.480136f, 1.545351f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.536000f, 0.000000f, -0.844200f }	},
	{	{ 0.480136f, 0.035385f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.536000f, 0.000000f, -0.844200f }	},
	{	{ -0.447859f, 0.071887f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.489500f, -0.872000f }	},
	{	{ 0.447859f, 0.071887f, -0.525899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.489500f, -0.872000f }	},
	{	{ 0.480136f, 0.035385f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.489500f, -0.872000f }	},
	{	{ -0.480136f, 0.035385f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.489500f, -0.872000f }	},
	{	{ 0.505406f, 0.006807f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.505406f, 0.006807f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.505406f, 0.006807f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.505406f, 0.006807f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.571075f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.571075f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.571075f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.571075f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.620438f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.620438f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.620438f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.505406f, 1.620438f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.505406f, 1.620438f, -0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.620438f, 0.505406f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.571075f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.620438f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.505406f, 1.620438f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.505406f, 1.620438f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.505406f, 1.571075f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.505406f, 1.571075f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.505406f, 1.571075f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.505406f, 1.620438f, -0.615021f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.107920f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.107920f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.099014f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.107920f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.113955f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ -0.107920f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.854000f, 0.000000f, -0.520300f }	},
	{	{ -0.107920f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.854000f, 0.000000f, -0.520300f }	},
	{	{ -0.113955f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.854000f, 0.000000f, -0.520300f }	},
	{	{ -0.113955f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.854000f, 0.000000f, -0.520300f }	},
	{	{ -0.099014f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.107920f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.107920f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.107920f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.107920f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, -0.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.402219f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.438369f, -0.512596f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ 0.113955f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.854000f, 0.000000f, -0.520300f }	},
	{	{ 0.107920f, 1.402219f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.854000f, 0.000000f, -0.520300f }	},
	{	{ 0.107920f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.854000f, 0.000000f, -0.520300f }	},
	{	{ 0.113955f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.854000f, 0.000000f, -0.520300f }	},
	{	{ 0.107920f, 1.438369f, -0.566059f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.099014f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.099014f, 1.438369f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.099014f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.099014f, 1.402219f, -0.556154f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, 1.000000f }	},
};
#define _Kitchen_1Drawers_vertices_
#endif
#ifndef _Kitchen_1Drawers_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Kitchen_1Drawers_indices[252] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 1, 20, 21,
	 2, 1, 21,
	 22, 0, 3,
	 23, 22, 3,
	 20, 22, 23,
	 21, 20, 23,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 34,
	 35, 32, 34,
	 36, 37, 38,
	 39, 36, 38,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 49, 13,
	 12, 48, 13,
	 50, 51, 52,
	 53, 50, 52,
	 54, 55, 5,
	 4, 54, 5,
	 56, 57, 9,
	 8, 56, 9,
	 58, 59, 13,
	 49, 58, 13,
	 60, 61, 51,
	 50, 60, 51,
	 62, 63, 64,
	 65, 62, 64,
	 66, 67, 56,
	 8, 66, 56,
	 68, 69, 70,
	 71, 68, 70,
	 72, 73, 74,
	 75, 72, 74,
	 76, 77, 78,
	 79, 76, 78,
	 80, 81, 82,
	 83, 80, 82,
	 75, 74, 84,
	 85, 75, 84,
	 86, 87, 88,
	 89, 86, 88,
	 90, 91, 92,
	 93, 90, 92,
	 94, 95, 77,
	 76, 94, 77,
	 96, 74, 73,
	 97, 96, 73,
	 98, 71, 70,
	 99, 98, 70,
	 100, 94, 76,
	 101, 100, 76,
	 99, 102, 103,
	 98, 99, 103,
	 96, 97, 104,
	 105, 96, 104,
	 106, 107, 101,
	 108, 106, 101,
	 109, 110, 111,
	 112, 109, 111,
	 113, 96, 105,
	 114, 113, 105,
	 115, 116, 117,
	 118, 115, 117,
	 119, 120, 121,
	 122, 119, 121,
	 107, 123, 100,
	 101, 107, 100,
	 124, 125, 126,
	 127, 124, 126,
};
#define _Kitchen_1Drawers_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Kitchen_1Drawers_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Kitchen_1Drawers_materials[3] =
{
	{
		{{ 0.103748f, 0.134357f, 0.115672f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Kitchen",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.219061f, 0.216811f, 0.210142f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"KitchenTop",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.358380f, 0.354633f, 0.343527f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"White",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Kitchen_1Drawers_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Kitchen_1Drawers_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Kitchen_1Drawers_batches[3][2] =
{
	{ 84, 0 },
	{ 48, 84 },
	{ 120, 132 },
};
#define _Kitchen_1Drawers_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Kitchen_1Drawers_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Kitchen_1Drawers_meshes[3] =
{
	{
		"default",
		84,
		0,
		0,
	},
	{
		"default",
		48,
		84,
		1,
	},
	{
		"default",
		120,
		132,
		2,
	},
};
#define _Kitchen_1Drawers_meshes_
#endif
