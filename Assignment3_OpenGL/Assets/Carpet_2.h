// "Carpet_2.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Carpet_2.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Carpet_2_version_
const char Carpet_2_version[4] = { '0','1','9','d' };
#define _Carpet_2_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Carpet_2_vertexcount_
const unsigned Carpet_2_vertexcount = 60;
#define _Carpet_2_vertexcount_
#endif
#ifndef _Carpet_2_indexcount_
const unsigned Carpet_2_indexcount = 294;
#define _Carpet_2_indexcount_
#endif
#ifndef _Carpet_2_materialcount_
const unsigned Carpet_2_materialcount = 2; // can be used for batched draws
#define _Carpet_2_materialcount_
#endif
#ifndef _Carpet_2_meshcount_
const unsigned Carpet_2_meshcount = 2;
#define _Carpet_2_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Carpet_2_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Carpet_2_vertices[60] =
{
	{	{ 1.498416f, 0.000000f, 1.424586f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002700f, 1.000000f, 0.003400f }	},
	{	{ 1.498415f, 0.000000f, -1.527740f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002500f, 1.000000f, -0.003600f }	},
	{	{ 0.782992f, 0.000000f, -1.512352f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.149300f, 0.988800f, 0.006100f }	},
	{	{ 0.782992f, 0.000000f, 1.439974f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.141500f, 0.989900f, 0.007300f }	},
	{	{ -0.890674f, 0.000000f, 1.446943f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.200400f, 0.979700f, 0.004500f }	},
	{	{ -0.890674f, 0.000000f, -1.505383f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.200100f, 0.979800f, -0.004400f }	},
	{	{ -1.335649f, 0.000000f, -1.512741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003200f, 1.000000f, -0.003400f }	},
	{	{ -1.335649f, 0.000000f, 1.439585f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003200f, 1.000000f, 0.003500f }	},
	{	{ 0.723303f, 0.017652f, -1.512436f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.152900f, 0.988200f, 0.010300f }	},
	{	{ 0.723304f, 0.017652f, 1.439890f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.160100f, 0.987100f, 0.003900f }	},
	{	{ -0.812650f, 0.033267f, 1.450999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.136200f, 0.990700f, -0.006700f }	},
	{	{ -0.812650f, 0.033267f, -1.501327f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.136800f, 0.990600f, 0.007300f }	},
	{	{ -0.744791f, 0.023433f, 1.455119f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.132000f, 0.991100f, -0.018600f }	},
	{	{ -0.744791f, 0.023433f, -1.497207f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.130200f, 0.991300f, 0.017500f }	},
	{	{ -0.546623f, 0.000000f, 1.461798f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.065800f, 0.997800f, -0.009000f }	},
	{	{ -0.546623f, 0.000000f, -1.490528f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.064900f, 0.997900f, 0.008300f }	},
	{	{ 0.663615f, 0.019166f, 1.439807f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.135900f, 0.990600f, -0.016100f }	},
	{	{ 0.663615f, 0.019166f, -1.512519f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.145100f, 0.989400f, 0.005100f }	},
	{	{ 0.604923f, 0.000000f, -1.512601f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.160000f, 0.987100f, 0.000000f }	},
	{	{ 0.604923f, 0.000000f, 1.439724f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.168000f, 0.985700f, -0.016000f }	},
	{	{ -0.517110f, -0.000867f, 1.557527f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.049000f, 0.998800f, -0.004100f }	},
	{	{ 0.597519f, -0.000867f, 1.537698f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.159100f, 0.987200f, 0.013700f }	},
	{	{ 0.595733f, -0.000357f, 1.480140f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.144600f, 0.989500f, -0.004200f }	},
	{	{ -0.532135f, -0.000357f, 1.501287f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.057600f, 0.998300f, -0.008600f }	},
	{	{ -0.513743f, -0.000867f, -1.587407f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.047100f, 0.998900f, 0.006300f }	},
	{	{ -0.732110f, 0.024955f, -1.594765f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.128500f, 0.991300f, 0.030100f }	},
	{	{ -0.738635f, 0.024061f, -1.537451f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.128700f, 0.991100f, 0.032600f }	},
	{	{ -0.532135f, -0.000357f, -1.530492f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.057600f, 0.998300f, 0.010600f }	},
	{	{ 0.793738f, -0.000867f, 1.537973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.124900f, 0.992000f, -0.018300f }	},
	{	{ 1.637353f, -0.000867f, 1.521016f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003700f, 1.000000f, 0.003200f }	},
	{	{ 1.547804f, -0.000357f, 1.464365f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003100f, 1.000000f, 0.004500f }	},
	{	{ 0.781289f, -0.000357f, 1.480399f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.154700f, 0.987900f, -0.005800f }	},
	{	{ -1.455856f, -0.000867f, 1.533051f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004000f, 1.000000f, 0.003600f }	},
	{	{ -0.896229f, -0.000867f, 1.541159f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.191000f, 0.981500f, -0.010200f }	},
	{	{ -0.890652f, -0.000357f, 1.485808f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.206100f, 0.978500f, -0.001300f }	},
	{	{ -1.377310f, -0.000357f, 1.478141f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003400f, 1.000000f, 0.004800f }	},
	{	{ -0.735477f, 0.024955f, 1.550169f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.130600f, 0.991200f, -0.023300f }	},
	{	{ -0.738635f, 0.024061f, 1.494329f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.131400f, 0.990900f, -0.029800f }	},
	{	{ 0.602746f, -0.000357f, -1.551639f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.172300f, 0.984500f, 0.032600f }	},
	{	{ 0.581154f, -0.000867f, -1.607236f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.121300f, 0.991900f, 0.038000f }	},
	{	{ -1.455856f, -0.000867f, -1.611883f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003800f, 1.000000f, -0.003600f }	},
	{	{ -1.377310f, -0.000357f, -1.553638f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003300f, 1.000000f, -0.004600f }	},
	{	{ 1.637353f, -0.000867f, -1.623918f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003600f, 1.000000f, -0.003200f }	},
	{	{ 0.777373f, -0.000867f, -1.606961f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.159300f, 0.986400f, -0.040400f }	},
	{	{ 0.788302f, -0.000357f, -1.551380f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.128400f, 0.991600f, -0.012600f }	},
	{	{ 1.547804f, -0.000357f, -1.567415f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002900f, 1.000000f, -0.004800f }	},
	{	{ 0.662192f, 0.020253f, 1.537789f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.134600f, 0.990900f, 0.001400f }	},
	{	{ 0.656892f, 0.019614f, 1.480225f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.158100f, 0.987300f, -0.017200f }	},
	{	{ 0.645828f, 0.020253f, -1.607146f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.177100f, 0.981800f, 0.068900f }	},
	{	{ 0.663906f, 0.019614f, -1.551554f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.127400f, 0.991400f, 0.029000f }	},
	{	{ -0.810252f, 0.035791f, 1.545628f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.120300f, 0.992300f, -0.028400f }	},
	{	{ -0.809347f, 0.034308f, 1.490035f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.119400f, 0.992600f, -0.023200f }	},
	{	{ 0.727965f, 0.018585f, 1.537881f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.168100f, 0.985100f, -0.035300f }	},
	{	{ 0.719091f, 0.018037f, 1.480313f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.145400f, 0.989300f, -0.012800f }	},
	{	{ -0.806886f, 0.035791f, -1.599305f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.132100f, 0.991000f, 0.019900f }	},
	{	{ -0.892863f, -0.000867f, -1.603776f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.191300f, 0.981500f, -0.001400f }	},
	{	{ -0.890652f, -0.000357f, -1.545971f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.202400f, 0.979300f, -0.004700f }	},
	{	{ -0.809347f, 0.034308f, -1.541744f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.127000f, 0.991700f, 0.017700f }	},
	{	{ 0.711600f, 0.018585f, -1.607053f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.134700f, 0.990600f, -0.025400f }	},
	{	{ 0.726104f, 0.018037f, -1.551467f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.169000f, 0.985600f, -0.007500f }	},
};
#define _Carpet_2_vertices_
#endif
#ifndef _Carpet_2_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Carpet_2_indices[294] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 3, 2, 8,
	 9, 3, 8,
	 10, 11, 5,
	 4, 10, 5,
	 12, 13, 11,
	 10, 12, 11,
	 14, 15, 13,
	 12, 14, 13,
	 16, 17, 18,
	 19, 16, 18,
	 9, 8, 17,
	 16, 9, 17,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 34,
	 35, 32, 34,
	 36, 20, 23,
	 37, 36, 23,
	 38, 39, 24,
	 27, 38, 24,
	 40, 32, 35,
	 41, 40, 35,
	 42, 43, 44,
	 45, 42, 44,
	 21, 46, 47,
	 22, 21, 47,
	 29, 42, 45,
	 30, 29, 45,
	 48, 39, 38,
	 49, 48, 38,
	 50, 36, 37,
	 51, 50, 37,
	 33, 50, 51,
	 34, 33, 51,
	 46, 52, 53,
	 47, 46, 53,
	 54, 55, 56,
	 57, 54, 56,
	 55, 40, 41,
	 56, 55, 41,
	 58, 48, 49,
	 59, 58, 49,
	 25, 54, 57,
	 26, 25, 57,
	 43, 58, 59,
	 44, 43, 59,
	 52, 28, 31,
	 53, 52, 31,
	 14, 19, 18,
	 15, 14, 18,
	 23, 22, 19,
	 14, 23, 19,
	 31, 30, 0,
	 3, 31, 0,
	 22, 47, 16,
	 19, 22, 16,
	 41, 35, 7,
	 6, 41, 7,
	 57, 56, 5,
	 11, 57, 5,
	 45, 44, 2,
	 1, 45, 2,
	 38, 27, 15,
	 18, 38, 15,
	 49, 38, 18,
	 17, 49, 18,
	 30, 45, 1,
	 0, 30, 1,
	 26, 57, 11,
	 13, 26, 11,
	 47, 53, 9,
	 16, 47, 9,
	 34, 51, 10,
	 4, 34, 10,
	 56, 41, 6,
	 5, 56, 6,
	 27, 26, 13,
	 15, 27, 13,
	 59, 49, 17,
	 8, 59, 17,
	 37, 23, 14,
	 12, 37, 14,
	 53, 31, 3,
	 9, 53, 3,
	 44, 59, 8,
	 2, 44, 8,
	 35, 34, 4,
	 7, 35, 4,
	 51, 37, 12,
	 10, 51, 12,
};
#define _Carpet_2_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Carpet_2_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Carpet_2_materials[2] =
{
	{
		{{ 0.081977f, 0.027901f, 0.018534f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"DarkRed",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.439078f, 0.263352f, 0.084138f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"LightOrange",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Carpet_2_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Carpet_2_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Carpet_2_batches[2][2] =
{
	{ 174, 0 },
	{ 120, 174 },
};
#define _Carpet_2_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Carpet_2_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Carpet_2_meshes[2] =
{
	{
		"default",
		174,
		0,
		0,
	},
	{
		"default",
		120,
		174,
		1,
	},
};
#define _Carpet_2_meshes_
#endif
