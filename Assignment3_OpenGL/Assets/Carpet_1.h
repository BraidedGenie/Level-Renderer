// "Carpet_1.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Carpet_1.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Carpet_1_version_
const char Carpet_1_version[4] = { '0','1','9','d' };
#define _Carpet_1_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Carpet_1_vertexcount_
const unsigned Carpet_1_vertexcount = 66;
#define _Carpet_1_vertexcount_
#endif
#ifndef _Carpet_1_indexcount_
const unsigned Carpet_1_indexcount = 324;
#define _Carpet_1_indexcount_
#endif
#ifndef _Carpet_1_materialcount_
const unsigned Carpet_1_materialcount = 2; // can be used for batched draws
#define _Carpet_1_materialcount_
#endif
#ifndef _Carpet_1_meshcount_
const unsigned Carpet_1_meshcount = 2;
#define _Carpet_1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Carpet_1_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Carpet_1_vertices[66] =
{
	{	{ -0.944808f, 0.000000f, 1.417032f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003400f, 1.000000f, 0.002700f }	},
	{	{ 0.944808f, 0.000000f, 1.417032f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003600f, 1.000000f, 0.002500f }	},
	{	{ 0.929420f, 0.000000f, 0.701609f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.006100f, 0.988800f, 0.149300f }	},
	{	{ -0.960195f, 0.000000f, 0.701609f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007300f, 0.989900f, 0.141500f }	},
	{	{ -0.923079f, 0.000000f, -0.972057f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004500f, 0.979700f, -0.200400f }	},
	{	{ 0.966536f, 0.000000f, -0.972057f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004400f, 0.979800f, -0.200100f }	},
	{	{ 0.973894f, 0.000000f, -1.417032f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003400f, 1.000000f, -0.003200f }	},
	{	{ -0.915722f, 0.000000f, -1.417032f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003500f, 1.000000f, -0.003200f }	},
	{	{ 0.929503f, 0.017652f, 0.641920f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.010300f, 0.988200f, 0.152900f }	},
	{	{ -0.960112f, 0.017652f, 0.641920f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003900f, 0.987100f, 0.160100f }	},
	{	{ -0.959018f, 0.000000f, -0.139683f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004500f, 1.000000f, -0.000100f }	},
	{	{ 0.930598f, 0.000000f, -0.139683f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004500f, 1.000000f, 0.000100f }	},
	{	{ 0.951682f, 0.000000f, -0.628007f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008200f, 0.997800f, 0.065100f }	},
	{	{ -0.937934f, 0.000000f, -0.628007f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.009100f, 0.997800f, 0.065700f }	},
	{	{ -0.927136f, 0.033267f, -0.894033f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.006700f, 0.990700f, -0.136200f }	},
	{	{ 0.962480f, 0.033267f, -0.894033f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.007300f, 0.990600f, -0.136800f }	},
	{	{ -0.931256f, 0.023433f, -0.826174f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.018600f, 0.991100f, 0.132000f }	},
	{	{ 0.958360f, 0.023433f, -0.826174f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.017500f, 0.991300f, 0.130200f }	},
	{	{ -0.959946f, 0.000000f, 0.523540f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.015900f, 0.985700f, -0.168000f }	},
	{	{ 0.929669f, 0.000000f, 0.523540f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.987100f, -0.160000f }	},
	{	{ -0.960028f, 0.019166f, 0.582231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.016100f, 0.990600f, -0.135900f }	},
	{	{ 0.929587f, 0.019166f, 0.582231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.005100f, 0.989400f, -0.145100f }	},
	{	{ 1.048560f, -0.000867f, -0.595127f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.006600f, 0.998800f, 0.048500f }	},
	{	{ 1.055919f, 0.024955f, -0.813494f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.030100f, 0.991300f, 0.128500f }	},
	{	{ 0.998604f, 0.024061f, -0.820019f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.032600f, 0.991100f, 0.128700f }	},
	{	{ 0.991645f, -0.000357f, -0.613519f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.010600f, 0.998300f, 0.057800f }	},
	{	{ -1.058195f, -0.000867f, 0.712354f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.018300f, 0.992000f, 0.124900f }	},
	{	{ -1.041238f, -0.000867f, 1.555970f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003200f, 1.000000f, 0.003700f }	},
	{	{ -0.984586f, -0.000357f, 1.466420f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004500f, 1.000000f, 0.003100f }	},
	{	{ -1.000621f, -0.000357f, 0.699906f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.005800f, 0.987900f, 0.154700f }	},
	{	{ -1.009187f, -0.000867f, -1.537240f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.003600f, 1.000000f, -0.004000f }	},
	{	{ -1.017295f, -0.000867f, -0.977613f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.010200f, 0.981500f, -0.191000f }	},
	{	{ -0.961944f, -0.000357f, -0.972036f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001300f, 0.978500f, -0.206100f }	},
	{	{ -0.954277f, -0.000357f, -1.458694f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.004800f, 1.000000f, -0.003400f }	},
	{	{ -1.026305f, 0.024955f, -0.816860f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.023300f, 0.991200f, 0.130600f }	},
	{	{ -1.033664f, -0.000867f, -0.598493f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003800f, 0.998900f, 0.047600f }	},
	{	{ -0.977424f, -0.000357f, -0.613519f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.008600f, 0.998300f, 0.057300f }	},
	{	{ -0.970465f, 0.024061f, -0.820019f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.029800f, 0.990900f, 0.131400f }	},
	{	{ -1.056896f, -0.000867f, -0.144556f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008900f, 1.000000f, -0.000200f }	},
	{	{ -1.057920f, -0.000867f, 0.516135f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.013700f, 0.987000f, -0.160200f }	},
	{	{ -1.000362f, -0.000357f, 0.514349f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004200f, 0.989500f, -0.144700f }	},
	{	{ -0.999394f, -0.000357f, -0.141694f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.008900f, 1.000000f, -0.000200f }	},
	{	{ 1.073036f, -0.000867f, -1.537240f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003600f, 1.000000f, -0.003800f }	},
	{	{ 1.014791f, -0.000357f, -1.458694f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004600f, 1.000000f, -0.003300f }	},
	{	{ 1.024303f, -0.000867f, 0.499770f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.037700f, 0.992000f, -0.120400f }	},
	{	{ 1.025327f, -0.000867f, -0.144556f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.009100f, 1.000000f, 0.000200f }	},
	{	{ 0.969675f, -0.000357f, -0.141694f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.009100f, 1.000000f, 0.000200f }	},
	{	{ 0.968707f, -0.000357f, 0.521363f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.032600f, 0.984500f, -0.172200f }	},
	{	{ 1.040985f, -0.000867f, 1.555970f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.003200f, 1.000000f, 0.003600f }	},
	{	{ 1.024029f, -0.000867f, 0.695990f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.040400f, 0.986400f, 0.159300f }	},
	{	{ 0.968447f, -0.000357f, 0.706919f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.012600f, 0.991600f, 0.128400f }	},
	{	{ 0.984482f, -0.000357f, 1.466420f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004800f, 1.000000f, 0.002900f }	},
	{	{ -1.058010f, 0.020253f, 0.580809f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001400f, 0.990900f, -0.134600f }	},
	{	{ -1.000447f, 0.019614f, 0.575509f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.017200f, 0.987300f, -0.158100f }	},
	{	{ 1.024213f, 0.020253f, 0.564444f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.068900f, 0.981800f, -0.177100f }	},
	{	{ 0.968621f, 0.019614f, 0.582522f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.029000f, 0.991400f, -0.127400f }	},
	{	{ -1.021765f, 0.035791f, -0.891636f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.028400f, 0.992300f, -0.120300f }	},
	{	{ -0.966171f, 0.034308f, -0.890731f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.023200f, 0.992600f, -0.119400f }	},
	{	{ -1.058102f, 0.018585f, 0.646582f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.035300f, 0.985100f, 0.168100f }	},
	{	{ -1.000534f, 0.018037f, 0.637707f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.012800f, 0.989300f, 0.145400f }	},
	{	{ 1.060459f, 0.035791f, -0.888269f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.019900f, 0.991000f, -0.132100f }	},
	{	{ 1.064929f, -0.000867f, -0.974246f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001400f, 0.981500f, -0.191300f }	},
	{	{ 1.007125f, -0.000357f, -0.972036f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.004700f, 0.979300f, -0.202400f }	},
	{	{ 1.002897f, 0.034308f, -0.890731f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.017700f, 0.991700f, -0.127000f }	},
	{	{ 1.024121f, 0.018585f, 0.630217f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.025400f, 0.990600f, 0.134700f }	},
	{	{ 0.968534f, 0.018037f, 0.644721f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.007500f, 0.985600f, 0.169000f }	},
};
#define _Carpet_1_vertices_
#endif
#ifndef _Carpet_1_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Carpet_1_indices[324] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 3, 2, 8,
	 9, 3, 8,
	 10, 11, 12,
	 13, 10, 12,
	 14, 15, 5,
	 4, 14, 5,
	 16, 17, 15,
	 14, 16, 15,
	 13, 12, 17,
	 16, 13, 17,
	 18, 19, 11,
	 10, 18, 11,
	 20, 21, 19,
	 18, 20, 19,
	 9, 8, 21,
	 20, 9, 21,
	 22, 23, 24,
	 25, 22, 24,
	 26, 27, 28,
	 29, 26, 28,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 36,
	 37, 34, 36,
	 38, 39, 40,
	 41, 38, 40,
	 42, 30, 33,
	 43, 42, 33,
	 44, 45, 46,
	 47, 44, 46,
	 45, 22, 25,
	 46, 45, 25,
	 48, 49, 50,
	 51, 48, 50,
	 39, 52, 53,
	 40, 39, 53,
	 35, 38, 41,
	 36, 35, 41,
	 27, 48, 51,
	 28, 27, 51,
	 54, 44, 47,
	 55, 54, 47,
	 56, 34, 37,
	 57, 56, 37,
	 31, 56, 57,
	 32, 31, 57,
	 52, 58, 59,
	 53, 52, 59,
	 60, 61, 62,
	 63, 60, 62,
	 61, 42, 43,
	 62, 61, 43,
	 64, 54, 55,
	 65, 64, 55,
	 23, 60, 63,
	 24, 23, 63,
	 49, 64, 65,
	 50, 49, 65,
	 58, 26, 29,
	 59, 58, 29,
	 29, 28, 0,
	 3, 29, 0,
	 40, 53, 20,
	 18, 40, 20,
	 43, 33, 7,
	 6, 43, 7,
	 63, 62, 5,
	 15, 63, 5,
	 51, 50, 2,
	 1, 51, 2,
	 41, 40, 18,
	 10, 41, 18,
	 55, 47, 19,
	 21, 55, 19,
	 28, 51, 1,
	 0, 28, 1,
	 24, 63, 15,
	 17, 24, 15,
	 46, 25, 12,
	 11, 46, 12,
	 53, 59, 9,
	 20, 53, 9,
	 32, 57, 14,
	 4, 32, 14,
	 62, 43, 6,
	 5, 62, 6,
	 25, 24, 17,
	 12, 25, 17,
	 36, 41, 10,
	 13, 36, 10,
	 65, 55, 21,
	 8, 65, 21,
	 37, 36, 13,
	 16, 37, 13,
	 59, 29, 3,
	 9, 59, 3,
	 50, 65, 8,
	 2, 50, 8,
	 47, 46, 11,
	 19, 47, 11,
	 33, 32, 4,
	 7, 33, 4,
	 57, 37, 16,
	 14, 57, 16,
};
#define _Carpet_1_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Carpet_1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Carpet_1_materials[2] =
{
	{
		{{ 0.081977f, 0.027901f, 0.018534f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"DarkRed",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.439078f, 0.263352f, 0.084138f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"LightOrange",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Carpet_1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Carpet_1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Carpet_1_batches[2][2] =
{
	{ 192, 0 },
	{ 132, 192 },
};
#define _Carpet_1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Carpet_1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Carpet_1_meshes[2] =
{
	{
		"default",
		192,
		0,
		0,
	},
	{
		"default",
		132,
		192,
		1,
	},
};
#define _Carpet_1_meshes_
#endif
